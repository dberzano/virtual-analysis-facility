#!/bin/bash

#
# vaf-enter -- by Dario Berzano <dario.berzano@cern.ch>
#
# Part of virtual-analysis-facility.
#
# Enters a Bash shell with PoD + Experiment Software environment set.
#
# Both "local" and "remote" experiment environment is set through a set of
# scripts. "Local" means the host running vaf-enter; "remote" is the host
# effectively running the PROOF master. If not using pod-remote, local and
# remote hosts are the same.
#
# This is the order of execution:
#
#
# LOCAL ENVIRONMENT
#
#   common.before
#   vaf.conf
#   local.before
#   local.conf
#   <PoD environment from $VafConf_LocalPodLocation/PoD_env.sh>
#   common.after
#   local.after
#
#
# PAYLOAD PREPARATION
#
#   The script is executed (not sourced!) locally (with VAF environment set) and
#   its stdout output will be prepended to the remote environment. As a matter
#   of fact it can be any executable, not just a script:
#
#   payload
#
#
# REMOTE ENVIRONMENT
#
#   <output of payload>
#   common.before
#   vaf.conf
#   remote.before
#   remote.conf
#   common.after
#   remote.after
#
#
# All scripts are considered only if they exist. Scripts are searched for in the
# following paths, in an orderly fashion:
#
#   /etc/vaf/default
#   <dir of this script>/../etc
#   ~/.vaf
#
# This means that system-wide scripts have precedence over user's (~/.vaf).
#
# The PoD_env.sh exists if PoD is correctly installed. A failure in loading PoD
# environment is fatal.
#

#
# Variables
#

# Set to 1 for debug
export VafDebug

# Exit codes
export ErrArgs=1
export ErrLocalCf=2
export ErrKey=3
export ErrDefaultCf=4
export ErrUpdateCf=5

# Configuration search path (colon-separated)
export ConfPath=/etc/vaf/default:$(A=`dirname "$0"`;A=`dirname "$A"`;echo "$A/etc"):"$HOME/.vaf"

#
# Functions
#

# Wrapper to printout function
function _vaf_p() {
  local N=''
  if [ "$1" == '-n' ] ; then
    N='-n'
    shift
  fi
  echo -e $N "\033[1m$1\033[m"
}

# Printout only when debug is on
function _vaf_dp() {
  [ "$VafDebug" == 1 ] && _vaf_p "$@"
}

# Unprotects private key if necessary, then adds proper configuration lines
# to the SSH client configuration file
function _vaf_privkey_setup() {

  local InKeyFile="$HOME/.globus/userkey.pem"
  local OutKeyFile="/tmp/vaf_pod_ukey_u$UID.pem"
  local SshConfig="$HOME/.ssh/config"

  local VafUser="$1"
  local VafHost="$2"
  local VafPort="$3"

  # Check for key file
  if [ ! -r "$InKeyFile" ] ; then
    _vaf_p "Cannot find your private key in $InKeyFile"
    return 1
  fi

  # Detect if the key needs to be unprotected
  grep -q '^Proc-Type:.*ENCRYPTED' "$InKeyFile"
  if [ $? == 0 ] ; then
    rm -f "$OutKeyFile"
    touch "$OutKeyFile"
    chmod 0600 "$OutKeyFile"
    openssl rsa -in "$InKeyFile" -out "$OutKeyFile"
    if [ $? != 0 ] ; then
      _vaf_p 'You provided the wrong passphrase'
      return 1
    fi
  else
    _vaf_p 'Warning: your private key is stored unprotected'
    ln -nfs "$InKeyFile" "$OutKeyFile" || return 1
  fi

  # Add SSH config in case
  if [ ! -e "$SshConfig" ] ; then
    mkdir -p `dirname "$SshConfig"`
    touch "$SshConfig"
  fi

  local BeginMarker="### BEGIN VAF -- $VafUser@$VafHost:$VafPort ###"
  local EndMarker="### END VAF -- $VafUser@$VafHost:$VafPort ###"
  local BigNum=999999999

  # Remove any VAF PoD section, if it exists
  if grep -q "^${BeginMarker}\$" "$SshConfig" && \
     grep -q "^${EndMarker}\$" "$SshConfig" ; then

     grep -m 1 -B $BigNum "^${BeginMarker}\$" "$SshConfig" | \
       grep -v "^${BeginMarker}\$" > "$SshConfig".0
     grep -m 1 -A $BigNum "^${EndMarker}\$" "$SshConfig" | \
       grep -v "^${EndMarker}\$" >> "$SshConfig".0

    #diff -rupN "$SshConfig" "$SshConfig".0 | pygmentize -ldiff  # debug

    mv "$SshConfig" $SshConfig.vafbak_`date +%Y%m%d-%H%M%S`
    mv "$SshConfig".0 "$SshConfig"
  fi

  # Add VAF PoD section if it exists
  cat >> "$SshConfig" <<_EoF_
$BeginMarker
Host $VafHost
  Port $VafPort
  User $VafUser
  HostName $VafHost
  IdentityFile $OutKeyFile
$EndMarker
_EoF_

  # Proper permissions
  chmod 0600 "$SshConfig"

  return 0
}

# Wrapper to pod-remote with proper environment
function vafctl() {
  local RetVal

  if [ "$VafUserHost" != '' ] ; then
    # Remote PoD
    # BUG: --ssh-opt is ignored by current PoD (v3.12)!
    pod-remote \
      --remote "$VafUserHost:$VafConf_RemotePodLocation" \
      --env-local "$VafPodRemoteEnv" \
      "$@"
  else
    # Local PoD
    local Cmd="$1"
    [ "${Cmd:0:2}" == '--' ] && Cmd="${Cmd:2}"
    pod-server "$Cmd"
  fi

  return $RetVal
}

# Wrapper to pod-submit executed within pod-remote
function vafreq() {
  local Num="$1"
  let Num+=0
  if [ $Num -le 0 ] ; then
    _vaf_p 'Usage: vafreq <n_workers>'
  elif ! pod-info -s > /dev/null 2>&1 ; then
    # Check if pod-server is running
    _vaf_p 'Cannot contact PoD server. Did you start it?'
    _vaf_p 'Tip: you can (re)start it with:'
    _vaf_p '  vafctl --start'
    return 1
  else
    local Queue
    [ "$VafConf_PodQueue" != '' ] && Queue="-q $VafConf_PodQueue"
    if [ "$VafUserHost" != '' ] ; then
      # pod-prep-worker is there to ensure that job payloads are up to date
      vafctl --command \
        "pod-prep-worker ; pod-submit -r $VafConf_PodRms $Queue -n $Num"
      return $?
    else
      pod-prep-worker
      pod-submit -r $VafConf_PodRms $Queue -n $Num
      return $?
    fi
  fi
}

# Wrapper to continuously ask pod-info for the number of workers
function vafcount() {
  local NumWorkers=0
  _vaf_p 'Updating every 5 seconds. Press Ctrl-C to stop monitoring...'
  while NumWorkers=`pod-info -n` ; do
    _vaf_p "[`date +%Y%m%d-%H%M%S`] $NumWorkers"
    sleep 5
  done
}

# Waits until one or the specified number of workers is available. Returns 0 on
# success, exits with nonzero if a failure occured
function vafwait() {
  local ReqWorkers=$(($1+0))
  [ "$ReqWorkers" == 0 ] && ReqWorkers=1
  _vaf_p "Waiting for $ReqWorkers worker(s)"
  while true ; do
    NumWorkers=`pod-info -n 2> /dev/null`
    if [ $? != 0 ] ; then
      _vaf_p 'Cannot obtain number of workers, aborting'
      return 1
    elif [ $NumWorkers -ge $ReqWorkers ] ; then
      _vaf_p 'OK!'
      _vaf_p "There are $NumWorkers worker(s) available"
      return 0
    else
      _vaf_p -n '.'
      sleep 1
    fi
  done
}

# Find the specified configuration file. Usage:
#   FindConf [-f] <source_cf>
#
# -f rises an error also when file is not found. Returns 0 on success, nonzero
# on error
function FindConf() {
  HandleConf "$@" '' find
  return $?
}

# Loads (sources) the specified configuration file. Usage:
#   LoadConf [-f] <source_cf>
#
# -f rises an error also when file is not found. Returns 0 on success, nonzero
# on error
function LoadConf() {
  HandleConf "$@" '' load
  return $?
}

# Appends a configuration file to another. Usage:
#   AppendConf [-f] <source_cf> <dest_cf>
#
# -f rises an error also when file is not found. Returns 0 on success, nonzero
# on error
function AppendConf() {
  HandleConf "$@" append
}

# Appends the output of an executable to a configuration file. Usage:
#   AppendOutputConf [-f] <executable> <dest_cf>
#
# -f rises an error also when file is not found. Returns 0 on success, nonzero
# on error
function AppendOutputConf() {
  HandleConf "$@" append-output
}

# Handles (appends/loads) a configuration file by raising errors if requested
# and printing out debug information. Used by AppendConf and LoadConf
function HandleConf() {

  local MustExist Cf Out Action

  if [ "$1" == '-f' ] ; then
    MustExist=1
    shift
  fi

  local Cf="$1"
  local Out="$2"
  local Action="$3"

  _vaf_dp "Looking for configuration file: $Cf"

  local Found=0

  if [ "${Cf:0:1}" == '/' ] ; then
    # Absolute path
    if [ -e "$Cf" ] ; then
      _vaf_dp " * $Cf: OK"
      Found=1
    else
      _vaf_dp " * $Cf: no"
    fi
  else
    # Relative path: append various search paths with priority
    local P OldIFS CfO CfP
    OldIFS="$IFS"
    IFS=':'
    for P in $ConfPath ; do
      CfP="$P/$Cf"
      if [ -e "$CfP" ] ; then
        Cf="$CfP"
        Found=1
        _vaf_dp " * $CfP: OK"
        break
     else
       _vaf_dp " * $CfP: no"
      fi
    done
    IFS="$OldIFS"
  fi

  if [ $Found == 1 ] ; then

    case "$Action" in
      load)
        _vaf_dp " * Loading"
        source "$Cf" || Err=1
      ;;
      append)
        _vaf_dp " * Adding"
        echo -e "\n### $Cf ###\n" >> "$Out"
        cat "$Cf" >> "$Out"
        echo '' >> "$Out"
      ;;
      append-output)
        _vaf_dp " * Adding output"
        echo -e "\n### Output of $Cf ###\n" >> "$Out"
        "$Cf" >> "$Out"
        echo '' >> "$Out"
      ;;
      find)
        echo "$Cf"
      ;;
    esac

  else
    _vaf_dp " * Not found"
    [ "$MustExist" == 1 ] && Err=1
  fi

  if [ "$Err" == 1 ] ; then
    _vaf_p "Error loading $Cf"
    return 1
  fi

  return 0
}

# The main function
function Main() {

  # Debug?
  [ "$VafDebug" != '0' ] && [ "$VafDebug" != '' ] && VafDebug=1

  if [ "$1" == '-h' ] || [ "$1" == '--help' ] ; then

    # Help screen

    local Prog=`basename "$0"`
    _vaf_p "$Prog -- by Dario Berzano <dario.berzano@cern.ch>"
    _vaf_p "Enter the virtual analysis facility environment"
    _vaf_p ''
    _vaf_p "Usage: $Prog [<user>@]<host>[:port]"
    _vaf_p ''
    _vaf_p '<host> is mandatory. Connect to https://<host>/auth from a browser'
    _vaf_p 'with your Grid certificate installed to obtain credentials.'
    _vaf_p ''
    return $ErrArgs
  elif [ "$1" != '' ] ; then

    # Working with pod-remote: parse [user@]host[:port] string

    local ConnStr="$1"
    local VafUserHost=${ConnStr%:*}  # only user@host here

    # Parse port
    local VafPort=${ConnStr##*:}
    [ "$VafPort" == "$VafUserHost" ] && VafPort=''  # in case no port is set
    [ "$VafPort" == '' ] && VafPort='22'

    # Parse user
    local VafUser="${VafUserHost%@*}"
    [ "$VafUser" == "$VafUserHost" ] && VafUser=''
    [ "$VafUser" == '' ] && VafUser="$USER"

    # Parse host (can't be null)
    local VafHost="${VafUserHost##*@}"

    # Set prompt for environment shell
    PS1="pod://${VafUser}@${VafHost}"
    [ "$VafPort" != '' ] && [ "$VafPort" != '22' ] && PS1="$PS1:$VafPort"

  else

    # Working locally
    PS1="pod://\u@localhost"

  fi

  # Append dir to the prompt
  PS1="$PS1 [\W] > "

  local ConfPrefix="$HOME/.vaf"
  local Cf

  #
  # Local environment
  #

  # Check if vaf.conf exists in the home directory. If it does not, create a
  # default one and exit immediately.

  local VafUserConf VafUserConfDest VafUserConfExample

  VafUserConfDest="$HOME/.vaf/vaf.conf"
  VafUserConf=$( FindConf -f 'vaf.conf' )
  if [ $? == 1 ] ; then
    _vaf_p "VAF configuration file not found."
    VafUserConfExample=$( FindConf -f 'vaf.conf.example' )
    if [ $? == 1 ] ; then
      _vaf_p "Please create a $VafUserConfDest file with your settings."
      exit $ErrDefaultCf
    elif ! mkdir -p $(dirname "$VafUserConfDest") > /dev/null 2>&1 ; then
      _vaf_p "Problems creating $(dirname "$VafUserConfDest")."
      exit $ErrDefaultCf
    elif ! cp "$VafUserConfExample" "$VafUserConfDest" > /dev/null 2>&1 ; then
      _vaf_p "Problems copying $VafUserConfExample to $VafUserConfDest"
      exit $ErrDefaultCf
    fi
    _vaf_p "A default one has been created in $VafUserConfDest."
    _vaf_p "Edit it to your needs and run vaf-enter again."
    exit $ErrUpdateCf
  fi

  # Before PoD
  local ConfLocalPre=( 'common.before' 'vaf.conf' 'local.before' 'local.conf' )
  for Cf in ${ConfLocalPre[@]} ; do
    LoadConf "$Cf" || exit $ErrLocalCf
  done

  # Load PoD environment
  LoadConf -f "$VafConf_LocalPodLocation"/PoD_env.sh || exit $ErrLocalCf

  # After PoD
  local ConfLocalPost=( 'common.after' 'local.after' )
  for Cf in ${ConfLocalPost[@]} ; do
    LoadConf "$Cf" || exit $ErrLocalCf
  done

  # Prepare script for remote environment, including payload
  local VafPodRemoteEnv="/tmp/vaf_pod_remote_env_u$UID"
  echo -n '' > "$VafPodRemoteEnv"

  # Appending output of payload script (must be executable)
  AppendOutputConf 'payload' "$VafPodRemoteEnv"

  # Append other configuration scripts (will be sourced remotely and not
  # interpreted locally)
  local ConfRemote=(
    'common.before'
    'vaf.conf'
    'remote.before'
    'remote.conf'
    'common.after'
    'remote.after'
  )
  for Cf in ${ConfRemote[@]} ; do
    AppendConf "$Cf" "$VafPodRemoteEnv"
  done

  # Load "remote" configuration locally if we are working as such
  if [ "$VafUserHost" == '' ] ; then
    LoadConf "$VafPodRemoteEnv" || exit $ErrLocalCf
  fi

  # Set some defaults
  [ "$VafConf_PodRms" == '' ] && VafConf_PodRms='condor'

  # Grid key configuration
  _vaf_privkey_setup "$VafUser" "$VafHost" "$VafPort"
  if [ $? != 0 ] && [ "$VafUserHost" != '' ] ; then
    # Fatal if running pod-remote
    return $ErrKey
  fi

  # Enter shell
  if [ "$VafUserHost" != '' ] ; then
    _vaf_p "Entering VAF environment: $VafUserHost"
  else
    _vaf_p 'Entering local VAF environment'
  fi
  _vaf_p 'Remember: you are still in a shell on your local computer!'
  _vaf_p 'Type "exit" to return to your previous shell.'
  export VafPodRemoteEnv VafUserHost VafConf_PodRms VafConf_PodQueue
  export -f vafctl vafreq vafcount vafwait _vaf_p _vaf_dp

  # Preserve local .bashrc
  exec bash --rcfile <( cat ~/.bashrc ; \
    echo -e "\nexport PS1='$PS1'\n" )

}

#
# Entry point
#

Main "$@"
