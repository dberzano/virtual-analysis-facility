#!/bin/bash
#
# elastiq:      Starts and stops the elastiq HTCondor queue monitor
#
# chkconfig: - 99 09
# description:  Control script for starting/stopping elastiq.py using \
#               proper environment. Requires SLC6 (or RHEL6-compat) \
#               with CVMFS: uses Python v2.7 from there.
#
### BEGIN INIT INFO
# Provides: elastiq
# Required-Start:
# Default-Stop: 0 1 6
# Short-Description: Starts the Name Switch Cache Daemon
# Description:  Control script for starting/stopping elastiq.py using \
#               proper environment. Requires SLC6 (or RHEL6-compat) \
#               with CVMFS: uses Python v2.7 from there.
### END INIT INFO

# Source function library.
. /etc/init.d/functions

#
# elastiq -- by Dario Berzano <dario.berzano@cern.ch>
#
# Control script for starting/stopping elastiq.py using proper environment.
# Requires SLC6 with CVMFS: uses Python v2.7 from there.
#

Prog=`readlink -e "$0"`
cd `dirname "$Prog"`
Prog=`basename "$0"`
Lock='/var/lock/subsys/elastiq'

# GCC
source /cvmfs/sft.cern.ch/lcg/external/gcc/4.7.2/x86_64-slc6-gcc47-opt/setup.sh ''  # empty arg needed!

# Python 2.7
export PythonPrefix=/cvmfs/sft.cern.ch/lcg/external/Python/2.7.3/x86_64-slc6-gcc47-opt
export PATH="$PythonPrefix/bin:$PATH"
export LD_LIBRARY_PATH="$PythonPrefix/lib:$LD_LIBRARY_PATH"

# Boto
export PyBotoPrefix='/var/lib/condor/boto'
export PATH="$PyBotoPrefix/bin:$PATH"
export LD_LIBRARY_PATH="$PyBotoPrefix/lib:$LD_LIBRARY_PATH"
export PYTHONPATH="$PyBotoPrefix/lib/python2.7/site-packages:$PYTHONPATH"

# Control variables
export elastiqScreenName='elastiq'
export elastiqCommand='python elastiq.py'
export elastiqLogFile=$( readlink -m '../var/log/elastiq.log' )
export elastiqUser='condor'  # TODO: don't hardcode

# Stop elastiq
function stop() {

  # Kill elastiq
  echo -n "Stopping $Prog: "
  local Signal='15'
  local LastMsg
  while true ; do
    LastMsg=`status` || break
    status 2> /dev/null  # for pid
    kill -$Signal $Pid 2> /dev/null
    sleep 1
    kill -0 $Pid 2> /dev/null && Signal=9
  done

  # Clean dangling screen
  screen -ls | grep -q "$elastiqScreenName" && \
    screen -S "$elastiqScreenName" -X quit
  screen -wipe > /dev/null 2>&1

  echo -n "$LastMsg"
  rm -f "$Lock"
  success
  echo ''

  return 0

}

# Query status
function status() {
  local Out
  Out=$( ps -e -o pid,command | grep " ${elastiqCommand}$" | grep -v SCREEN )
  if [ "$Out" == '' ] ; then
    export Pid=''
    echo "$Prog not running"
    return 1
  else
    export Pid=$(echo $Out | awk '{ print $1 }')
    echo "$Prog running with PID $Pid"
    return 0
  fi
}

# Enter elastiq screen
function enter_screen() {
  if status ; then
    screen -r "$elastiqScreenName"
    return $?
  fi
  return 1
}

# Start elastiq
function start() {
  echo -n "Starting $Prog: "
  local Rv=0
  local LastMsg
  LastMsg=`status`
  if [ $? != 0 ] ; then

    # Switching to unprivileged
    if [ `whoami` == 'root' ] ; then
      Cmd="su $elastiqUser -s /bin/sh -c"
    else
      Cmd="/bin/sh -c"
    fi
    $Cmd "screen -dmS \"$elastiqScreenName\" $elastiqCommand" > /dev/null 2>&1

    sleep 1
    LastMsg=`status`
    Rv=$?
  fi
  echo -n "$LastMsg"
  if [ $Rv == 0 ] ; then
    touch "$Lock" 2> /dev/null
    success
  else
    failure
  fi
  echo ''
  return $Rv
}


# Entry point
case "$1" in

  start)
    start
    exit $?
  ;;

  stop)
    stop
    exit $?
  ;;

  status)
    status
    exit $?
  ;;

  restart)
    stop && start
    exit $?
  ;;

  log)
    status && tail -f "$elastiqLogFile"
    exit $?
  ;;

  console)
    enter_screen
    exit $?
  ;;

  *)
    echo "Usage: $Prog [start|stop|status|restart|log|console]"
    exit 1
  ;;

esac
